# AUTOGENERATED FROM:
#     'app/queries/create_event.edgeql'
#     'app/queries/create_user.edgeql'
#     'app/queries/delete_event.edgeql'
#     'app/queries/delete_user.edgeql'
#     'app/queries/get_event_by_name.edgeql'
#     'app/queries/get_events.edgeql'
#     'app/queries/get_user_by_name.edgeql'
#     'app/queries/get_users.edgeql'
#     'app/queries/update_event.edgeql'
#     'app/queries/update_user.edgeql'
# WITH:
#     $ edgedb-py --file


from __future__ import annotations

import dataclasses
import datetime
import uuid

import edgedb


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateEventResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    address: str | None
    schedule: datetime.datetime | None
    host: CreateEventResultHost | None


@dataclasses.dataclass
class CreateEventResultHost(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    created_at: datetime.datetime


async def create_event(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    address: str,
    schedule: str,
    host_name: str,
) -> CreateEventResult:
    return await executor.query_single(
        """\
        with name := <str>$name,
            address := <str>$address,
            schedule := <str>$schedule,
            host_name := <str>$host_name

        select (
            insert Event {
                name := name,
                address := address,
                schedule := <datetime>schedule,
                host := assert_single(
                    (select detached User filter .name = host_name)
                )
            }
        ) {name, address, schedule, host: {name}};\
        """,
        name=name,
        address=address,
        schedule=schedule,
        host_name=host_name,
    )


async def create_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
) -> CreateUserResult:
    return await executor.query_single(
        """\
        select (insert User {name:=<str>$name}) {name, created_at};\
        """,
        name=name,
    )


async def delete_event(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
) -> CreateEventResult | None:
    return await executor.query_single(
        """\
        select (
            delete Event filter .name = <str>$name
        ) {name, address, schedule, host : {name}};\
        """,
        name=name,
    )


async def delete_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        select (
            delete User filter .name = <str>$name
        ) {name, created_at};\
        """,
        name=name,
    )


async def get_event_by_name(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
) -> CreateEventResult | None:
    return await executor.query_single(
        """\
        select Event {
            name, address, schedule,
            host : {name}
        } filter .name=<str>$name;\
        """,
        name=name,
    )


async def get_events(
    executor: edgedb.AsyncIOExecutor,
) -> list[CreateEventResult]:
    return await executor.query(
        """\
        select Event {name, address, schedule, host : {name}};\
        """,
    )


async def get_user_by_name(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        select User {name, created_at} filter User.name=<str>$name\
        """,
        name=name,
    )


async def get_users(
    executor: edgedb.AsyncIOExecutor,
) -> list[CreateUserResult]:
    return await executor.query(
        """\
        select User {name, created_at};\
        """,
    )


async def update_event(
    executor: edgedb.AsyncIOExecutor,
    *,
    current_name: str,
    name: str,
    address: str,
    schedule: str,
    host_name: str,
) -> CreateEventResult | None:
    return await executor.query_single(
        """\
        with current_name := <str>$current_name,
            new_name := <str>$name,
            address := <str>$address,
            schedule := <str>$schedule,
            host_name := <str>$host_name

        select (
            update Event filter .name = current_name
            set {
                name := new_name,
                address := address,
                schedule := <datetime>schedule,
                host := (select User filter .name = host_name)
            }
        ) {name, address, schedule, host: {name}};\
        """,
        current_name=current_name,
        name=name,
        address=address,
        schedule=schedule,
        host_name=host_name,
    )


async def update_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    current_name: str,
    new_name: str,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        select (
            update User filter .name = <str>$current_name
            set {name := <str>$new_name}
        ) {name, created_at};\
        """,
        current_name=current_name,
        new_name=new_name,
    )
